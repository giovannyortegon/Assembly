; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30137.0 

	TITLE	C:\Users\Giovanny.O\source\repos\IntegerAddition\IntegerAddition\Debug\IntegerAddition.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_GlChar
PUBLIC	_GlShort
PUBLIC	_GlInt
PUBLIC	_GlLongLong
msvcjmc	SEGMENT
__97D3638F_vcruntime_new@h DB 01H
__741AE07E_corecrt_math@h DB 01H
__B49664B7_stdlib@h DB 01H
__244AF085_cstdlib DB 01H
__60BC708E_cmath DB 01H
__A2143F22_corecrt_stdio_config@h DB 01H
__829E1958_corecrt_wstdio@h DB 01H
__6DFAE8B8_stdio@h DB 01H
__1FEB9909_corecrt_memcpy_s@h DB 01H
__A751F051_corecrt_memory@h DB 01H
__9200769A_corecrt_wstring@h DB 01H
__32E5F013_string@h DB 01H
__C6E16F6F_corecrt_wconio@h DB 01H
__6D390390_corecrt_wio@h DB 01H
__1157D6BA_corecrt_wtime@h DB 01H
__1DC1E279_stat@h DB 01H
__93DC0B45_wchar@h DB 01H
__589FA321_type_traits DB 01H
__12269DE6_xutility DB 01H
__20BB4341_malloc@h DB 01H
__B0A13A33_vcruntime_exception@h DB 01H
__FF458F76_exception DB 01H
__7FE5F402_limits DB 01H
__79D216CD_xmemory DB 01H
__0D019051_xstring DB 01H
__760BB52B_stdexcept DB 01H
__A4685E82_xcall_once@h DB 01H
__A0B61CF9_time@h DB 01H
__DDB379A0_xthreads@h DB 01H
__14D0A8C0_atomic DB 01H
__1B354CA2_system_error DB 01H
__65ADBEC9_vcruntime_typeinfo@h DB 01H
__62F96EFF_typeinfo DB 01H
__C34BF88C_memory DB 01H
__EF0EAF83_xfacet DB 01H
__B2D2BA86_ctype@h DB 01H
__7D708D37_xlocinfo DB 01H
__D23FE460_xlocale DB 01H
__4495FA24_xiosbase DB 01H
__4CB88277_xlocnum DB 01H
__845859A3_ios DB 01H
__A23411D8_tchar@h DB 01H
__BB5F3E13_IntegerAddition@cpp DB 01H
__A2FF0B9E_istream DB 01H
__C12F3EA4_ostream DB 01H
__74AB0D97_streambuf DB 01H
__038A2AA6_iterator DB 01H
__B30C2184_iosfwd DB 01H
__1347750E_utility DB 01H
__E458E21C_xstddef DB 01H
__F54903A0_xatomic@h DB 01H
msvcjmc	ENDS
_DATA	SEGMENT
_GlChar	DB	0aH
	ORG $+3
_GlShort DW	014H
	ORG $+2
_GlInt	DD	01eH
	ORG $+4
_GlLongLong DQ	00000000fffffffeH
_DATA	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z	; std::_Narrow_char_traits<char,int>::length
PUBLIC	?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
PUBLIC	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ	; std::_Narrow_char_traits<char,int>::eof
PUBLIC	_main
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_01EEMJAFIK@?6@				; `string'
PUBLIC	??_C@_0BA@EFPPDKIJ@Before?5GlChar?3?5@		; `string'
PUBLIC	??_C@_0BA@FGLLNOHM@?5?5?5?5?5?5?5GlChar?3?5@	; `string'
PUBLIC	??_C@_02PHMGELLB@?6?6@				; `string'
PUBLIC	??_C@_0P@HJHDDGBN@After?5GlChar?3?5@		; `string'
EXTRN	_strlen:PROC
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
EXTRN	__imp_?good@ios_base@std@@QBE_NXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QBEHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QBE_JXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QAE_J_J@Z:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@F@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_J@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:PROC
EXTRN	_IntegerAddition_:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0P@HJHDDGBN@After?5GlChar?3?5@
CONST	SEGMENT
??_C@_0P@HJHDDGBN@After?5GlChar?3?5@ DB 'After GlChar: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02PHMGELLB@?6?6@
CONST	SEGMENT
??_C@_02PHMGELLB@?6?6@ DB 0aH, 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FGLLNOHM@?5?5?5?5?5?5?5GlChar?3?5@
CONST	SEGMENT
??_C@_0BA@FGLLNOHM@?5?5?5?5?5?5?5GlChar?3?5@ DB '       GlChar: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EFPPDKIJ@Before?5GlChar?3?5@
CONST	SEGMENT
??_C@_0BA@EFPPDKIJ@Before?5GlChar?3?5@ DB 'Before GlChar: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
	DB	023H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	034H
	DW	0433H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$3
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
	DB	023H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	034H
	DW	0478H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 124  :         explicit __CLR_OR_THIS_CALL operator bool() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __C12F3EA4_ostream
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 125  :             return _Ok;

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8a 40 04	 mov	 al, BYTE PTR [eax+4]

; 126  :         }

  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv72 = -229						; size = 1
__Zero_uncaught_exceptions$ = -29			; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 109  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d d8	 lea	 edi, DWORD PTR [ebp-40]
  0001e	b9 07 00 00 00	 mov	 ecx, 7
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0003f	b9 00 00 00 00	 mov	 ecx, OFFSET __C12F3EA4_ostream
  00044	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 110  : #if !_HAS_EXCEPTIONS
; 111  :             const bool _Zero_uncaught_exceptions = true;
; 112  : #elif _HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 113  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  00049	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  0004e	0f b6 c0	 movzx	 eax, al
  00051	85 c0		 test	 eax, eax
  00053	75 09		 jne	 SHORT $LN4@sentry
  00055	c6 85 1b ff ff
	ff 01		 mov	 BYTE PTR tv72[ebp], 1
  0005c	eb 07		 jmp	 SHORT $LN5@sentry
$LN4@sentry:
  0005e	c6 85 1b ff ff
	ff 00		 mov	 BYTE PTR tv72[ebp], 0
$LN5@sentry:
  00065	8a 8d 1b ff ff
	ff		 mov	 cl, BYTE PTR tv72[ebp]
  0006b	88 4d e3	 mov	 BYTE PTR __Zero_uncaught_exceptions$[ebp], cl

; 114  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 115  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 116  : #endif // !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 117  : 
; 118  :             if (_Zero_uncaught_exceptions) {

  0006e	0f b6 45 e3	 movzx	 eax, BYTE PTR __Zero_uncaught_exceptions$[ebp]
  00072	85 c0		 test	 eax, eax
  00074	74 14		 je	 SHORT $LN1@sentry

; 119  :                 this->_Myostr._Osfx();

  00076	8b f4		 mov	 esi, esp
  00078	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0007b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00083	3b f4		 cmp	 esi, esp
  00085	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@sentry:

; 120  :             }
; 121  :         }

  0008a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0008d	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00092	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00095	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009c	59		 pop	 ecx
  0009d	5f		 pop	 edi
  0009e	5e		 pop	 esi
  0009f	5b		 pop	 ebx
  000a0	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  000a6	3b ec		 cmp	 ebp, esp
  000a8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c3		 ret	 0
  000b1	cc		 int	 3
  000b2	cc		 int	 3
  000b3	cc		 int	 3
  000b4	cc		 int	 3
  000b5	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 14 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-236]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
__Tied$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 92   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d dc	 lea	 edi, DWORD PTR [ebp-36]
  0001e	b9 06 00 00 00	 mov	 ecx, 6
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0003f	b9 00 00 00 00	 mov	 ecx, OFFSET __C12F3EA4_ostream
  00044	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00049	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  00055	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 93   :             if (!_Ostr.good()) {

  0005c	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0005f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00061	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00064	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00067	8b f4		 mov	 esi, esp
  00069	8b ca		 mov	 ecx, edx
  0006b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  00071	3b f4		 cmp	 esi, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	0f b6 c0	 movzx	 eax, al
  0007b	85 c0		 test	 eax, eax
  0007d	75 09		 jne	 SHORT $LN2@sentry

; 94   :                 _Ok = false;

  0007f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00082	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0

; 95   :                 return;

  00086	eb 6a		 jmp	 SHORT $LN1@sentry
$LN2@sentry:

; 96   :             }
; 97   : 
; 98   :             const auto _Tied = _Ostr.tie();

  00088	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0008b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008d	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00090	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00093	8b f4		 mov	 esi, esp
  00095	8b ca		 mov	 ecx, edx
  00097	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  0009d	3b f4		 cmp	 esi, esp
  0009f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a4	89 45 e0	 mov	 DWORD PTR __Tied$[ebp], eax

; 99   :             if (!_Tied || _Tied == &_Ostr) {

  000a7	83 7d e0 00	 cmp	 DWORD PTR __Tied$[ebp], 0
  000ab	74 08		 je	 SHORT $LN4@sentry
  000ad	8b 45 e0	 mov	 eax, DWORD PTR __Tied$[ebp]
  000b0	3b 45 08	 cmp	 eax, DWORD PTR __Ostr$[ebp]
  000b3	75 09		 jne	 SHORT $LN3@sentry
$LN4@sentry:

; 100  :                 _Ok = true;

  000b5	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000b8	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1

; 101  :                 return;

  000bc	eb 34		 jmp	 SHORT $LN1@sentry
$LN3@sentry:

; 102  :             }
; 103  : 
; 104  :             _Tied->flush();

  000be	8b f4		 mov	 esi, esp
  000c0	8b 4d e0	 mov	 ecx, DWORD PTR __Tied$[ebp]
  000c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  000c9	3b f4		 cmp	 esi, esp
  000cb	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 105  :             _Ok = _Ostr.good(); // store test only after flushing tie

  000d0	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000d3	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d5	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000d8	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000db	8b f4		 mov	 esi, esp
  000dd	8b ca		 mov	 ecx, edx
  000df	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  000e5	3b f4		 cmp	 esi, esp
  000e7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ec	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ef	88 41 04	 mov	 BYTE PTR [ecx+4], al
$LN1@sentry:

; 106  :         }

  000f2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000f9	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000fc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ff	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00106	59		 pop	 ecx
  00107	5f		 pop	 edi
  00108	5e		 pop	 esi
  00109	5b		 pop	 ebx
  0010a	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  00110	3b ec		 cmp	 ebp, esp
  00112	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00117	8b e5		 mov	 esp, ebp
  00119	5d		 pop	 ebp
  0011a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv72 = -232						; size = 4
__Rdbuf$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 78   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d d8	 lea	 edi, DWORD PTR [ebp-40]
  0001e	b9 07 00 00 00	 mov	 ecx, 7
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0003f	b9 00 00 00 00	 mov	 ecx, OFFSET __C12F3EA4_ostream
  00044	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 79   :             const auto _Rdbuf = _Myostr.rdbuf();

  00049	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004e	89 8d 18 ff ff
	ff		 mov	 DWORD PTR tv72[ebp], ecx
  00054	8b 95 18 ff ff
	ff		 mov	 edx, DWORD PTR tv72[ebp]
  0005a	8b 02		 mov	 eax, DWORD PTR [edx]
  0005c	8b 8d 18 ff ff
	ff		 mov	 ecx, DWORD PTR tv72[ebp]
  00062	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00065	8b f4		 mov	 esi, esp
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0006d	3b f4		 cmp	 esi, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00074	89 45 e0	 mov	 DWORD PTR __Rdbuf$[ebp], eax

; 80   :             if (_Rdbuf) {

  00077	83 7d e0 00	 cmp	 DWORD PTR __Rdbuf$[ebp], 0
  0007b	74 16		 je	 SHORT $LN3@Sentry_bas

; 81   :                 _Rdbuf->_Unlock();

  0007d	8b 45 e0	 mov	 eax, DWORD PTR __Rdbuf$[ebp]
  00080	8b 10		 mov	 edx, DWORD PTR [eax]
  00082	8b f4		 mov	 esi, esp
  00084	8b 4d e0	 mov	 ecx, DWORD PTR __Rdbuf$[ebp]
  00087	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0008a	ff d0		 call	 eax
  0008c	3b f4		 cmp	 esi, esp
  0008e	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@Sentry_bas:

; 82   :             }
; 83   :         }

  00093	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00096	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009d	59		 pop	 ecx
  0009e	5f		 pop	 edi
  0009f	5e		 pop	 esi
  000a0	5b		 pop	 ebx
  000a1	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  000a7	3b ec		 cmp	 ebp, esp
  000a9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ae	8b e5		 mov	 esp, ebp
  000b0	5d		 pop	 ebp
  000b1	c3		 ret	 0
  000b2	cc		 int	 3
  000b3	cc		 int	 3
  000b4	cc		 int	 3
  000b5	cc		 int	 3
  000b6	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 14 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-236]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
tv73 = -220						; size = 4
__Rdbuf$ = -20						; size = 4
_this$ = -8						; size = 4
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 71   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d e4	 lea	 edi, DWORD PTR [ebp-28]
  00010	b9 07 00 00 00	 mov	 ecx, 7
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __C12F3EA4_ostream
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00030	89 08		 mov	 DWORD PTR [eax], ecx

; 72   :             const auto _Rdbuf = _Myostr.rdbuf();

  00032	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00035	8b 08		 mov	 ecx, DWORD PTR [eax]
  00037	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv73[ebp], ecx
  0003d	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR tv73[ebp]
  00043	8b 02		 mov	 eax, DWORD PTR [edx]
  00045	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv73[ebp]
  0004b	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0004e	8b f4		 mov	 esi, esp
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00056	3b f4		 cmp	 esi, esp
  00058	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005d	89 45 ec	 mov	 DWORD PTR __Rdbuf$[ebp], eax

; 73   :             if (_Rdbuf) {

  00060	83 7d ec 00	 cmp	 DWORD PTR __Rdbuf$[ebp], 0
  00064	74 16		 je	 SHORT $LN1@Sentry_bas

; 74   :                 _Rdbuf->_Lock();

  00066	8b 45 ec	 mov	 eax, DWORD PTR __Rdbuf$[ebp]
  00069	8b 10		 mov	 edx, DWORD PTR [eax]
  0006b	8b f4		 mov	 esi, esp
  0006d	8b 4d ec	 mov	 ecx, DWORD PTR __Rdbuf$[ebp]
  00070	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00073	ff d0		 call	 eax
  00075	3b f4		 cmp	 esi, esp
  00077	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Sentry_bas:

; 75   :             }
; 76   :         }

  0007c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  00088	3b ec		 cmp	 ebp, esp
  0008a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
_TEXT	SEGMENT
tv128 = -356						; size = 8
tv280 = -352						; size = 4
tv275 = -352						; size = 4
tv314 = -348						; size = 8
tv279 = -348						; size = 4
tv277 = -348						; size = 4
tv274 = -348						; size = 4
tv276 = -344						; size = 4
tv65 = -344						; size = 4
tv278 = -341						; size = 1
tv273 = -341						; size = 1
$T2 = -336						; size = 4
$T3 = -324						; size = 4
$T4 = -312						; size = 4
$T5 = -300						; size = 4
$T6 = -288						; size = 4
$T7 = -276						; size = 4
$T8 = -264						; size = 4
__Pad$9 = -60						; size = 8
__Ok$ = -44						; size = 8
__State$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Ch$ = 12						; size = 1
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 779  :     basic_ostream<char, _Traits>& _Ostr, char _Ch) { // insert a char into char stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec 54 01 00
	00		 sub	 esp, 340		; 00000154H
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8d bd 5c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-164]
  00021	b9 25 00 00 00	 mov	 ecx, 37			; 00000025H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00032	33 c5		 xor	 eax, ebp
  00034	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00037	50		 push	 eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0003b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00041	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00044	b9 00 00 00 00	 mov	 ecx, OFFSET __C12F3EA4_ostream
  00049	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 780  :     using _Elem = char;
; 781  :     using _Myos = basic_ostream<_Elem, _Traits>;
; 782  : 
; 783  :     ios_base::iostate _State = ios_base::goodbit;

  0004e	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 784  :     const typename _Myos::sentry _Ok(_Ostr);

  00055	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00058	50		 push	 eax
  00059	8d 4d d4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0005c	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  00061	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 785  : 
; 786  :     if (_Ok) { // state okay, insert

  00068	8d 4d d4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0006b	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  00070	0f b6 c0	 movzx	 eax, al
  00073	85 c0		 test	 eax, eax
  00075	0f 84 3b 03 00
	00		 je	 $LN8@operator

; 787  :         streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

  0007b	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0007e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00080	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00083	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00086	8b f4		 mov	 esi, esp
  00088	8b ca		 mov	 ecx, edx
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  00090	3b f4		 cmp	 esi, esp
  00092	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00097	89 85 a4 fe ff
	ff		 mov	 DWORD PTR tv314[ebp], eax
  0009d	89 95 a8 fe ff
	ff		 mov	 DWORD PTR tv314[ebp+4], edx
  000a3	83 bd a8 fe ff
	ff 00		 cmp	 DWORD PTR tv314[ebp+4], 0
  000aa	7f 19		 jg	 SHORT $LN15@operator
  000ac	7c 09		 jl	 SHORT $LN22@operator
  000ae	83 bd a4 fe ff
	ff 01		 cmp	 DWORD PTR tv314[ebp], 1
  000b5	77 0e		 ja	 SHORT $LN15@operator
$LN22@operator:
  000b7	c5 f8 57 c0	 vxorps	 xmm0, xmm0, xmm0
  000bb	c5 f9 13 85 9c
	fe ff ff	 vmovlpd QWORD PTR tv128[ebp], xmm0
  000c3	eb 2e		 jmp	 SHORT $LN16@operator
$LN15@operator:
  000c5	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000c8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ca	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000cd	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000d0	8b f4		 mov	 esi, esp
  000d2	8b ca		 mov	 ecx, edx
  000d4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000da	3b f4		 cmp	 esi, esp
  000dc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e1	83 e8 01	 sub	 eax, 1
  000e4	83 da 00	 sbb	 edx, 0
  000e7	89 85 9c fe ff
	ff		 mov	 DWORD PTR tv128[ebp], eax
  000ed	89 95 a0 fe ff
	ff		 mov	 DWORD PTR tv128[ebp+4], edx
$LN16@operator:
  000f3	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR tv128[ebp]
  000f9	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR tv128[ebp+4]
  000ff	89 45 c4	 mov	 DWORD PTR __Pad$9[ebp], eax
  00102	89 4d c8	 mov	 DWORD PTR __Pad$9[ebp+4], ecx

; 788  : 
; 789  :         _TRY_IO_BEGIN

  00105	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 790  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

  00109	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0010c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0010e	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00111	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00114	8b f4		 mov	 esi, esp
  00116	8b ca		 mov	 ecx, edx
  00118	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
  0011e	3b f4		 cmp	 esi, esp
  00120	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00125	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv65[ebp], eax
  0012b	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR tv65[ebp]
  00131	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00136	83 f8 40	 cmp	 eax, 64			; 00000040H
  00139	0f 84 dd 00 00
	00		 je	 $LN10@operator

; 791  :             for (; _State == ios_base::goodbit && 0 < _Pad; --_Pad) { // pad on left

  0013f	eb 12		 jmp	 SHORT $LN4@operator
$LN2@operator:
  00141	8b 45 c4	 mov	 eax, DWORD PTR __Pad$9[ebp]
  00144	83 e8 01	 sub	 eax, 1
  00147	8b 4d c8	 mov	 ecx, DWORD PTR __Pad$9[ebp+4]
  0014a	83 d9 00	 sbb	 ecx, 0
  0014d	89 45 c4	 mov	 DWORD PTR __Pad$9[ebp], eax
  00150	89 4d c8	 mov	 DWORD PTR __Pad$9[ebp+4], ecx
$LN4@operator:
  00153	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  00157	0f 85 bf 00 00
	00		 jne	 $LN10@operator
  0015d	83 7d c8 00	 cmp	 DWORD PTR __Pad$9[ebp+4], 0
  00161	0f 8c b5 00 00
	00		 jl	 $LN10@operator
  00167	7f 0a		 jg	 SHORT $LN23@operator
  00169	83 7d c4 00	 cmp	 DWORD PTR __Pad$9[ebp], 0
  0016d	0f 86 a9 00 00
	00		 jbe	 $LN10@operator
$LN23@operator:

; 792  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00173	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00176	8b 08		 mov	 ecx, DWORD PTR [eax]
  00178	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0017b	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0017e	8b f4		 mov	 esi, esp
  00180	8b ca		 mov	 ecx, edx
  00182	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  00188	3b f4		 cmp	 esi, esp
  0018a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0018f	88 85 ab fe ff
	ff		 mov	 BYTE PTR tv273[ebp], al
  00195	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00198	8b 08		 mov	 ecx, DWORD PTR [eax]
  0019a	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0019d	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001a0	8b f4		 mov	 esi, esp
  001a2	8b ca		 mov	 ecx, edx
  001a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001aa	3b f4		 cmp	 esi, esp
  001ac	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001b1	89 85 a4 fe ff
	ff		 mov	 DWORD PTR tv274[ebp], eax
  001b7	8b f4		 mov	 esi, esp
  001b9	0f b6 85 ab fe
	ff ff		 movzx	 eax, BYTE PTR tv273[ebp]
  001c0	50		 push	 eax
  001c1	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv274[ebp]
  001c7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  001cd	3b f4		 cmp	 esi, esp
  001cf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001d4	89 85 a0 fe ff
	ff		 mov	 DWORD PTR tv275[ebp], eax
  001da	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR tv275[ebp]
  001e0	89 8d f8 fe ff
	ff		 mov	 DWORD PTR $T8[ebp], ecx
  001e6	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  001eb	89 85 ec fe ff
	ff		 mov	 DWORD PTR $T7[ebp], eax
  001f1	8d 95 f8 fe ff
	ff		 lea	 edx, DWORD PTR $T8[ebp]
  001f7	52		 push	 edx
  001f8	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
  001fe	50		 push	 eax
  001ff	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00204	83 c4 08	 add	 esp, 8
  00207	0f b6 c8	 movzx	 ecx, al
  0020a	85 c9		 test	 ecx, ecx
  0020c	74 09		 je	 SHORT $LN11@operator

; 793  :                     _State |= ios_base::badbit;

  0020e	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00211	83 c8 04	 or	 eax, 4
  00214	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax
$LN11@operator:

; 794  :                 }
; 795  :             }

  00217	e9 25 ff ff ff	 jmp	 $LN2@operator
$LN10@operator:

; 796  :         }
; 797  : 
; 798  :         if (_State == ios_base::goodbit && _Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ch))) {

  0021c	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  00220	75 7f		 jne	 SHORT $LN12@operator
  00222	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00225	8b 08		 mov	 ecx, DWORD PTR [eax]
  00227	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0022a	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0022d	8b f4		 mov	 esi, esp
  0022f	8b ca		 mov	 ecx, edx
  00231	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00237	3b f4		 cmp	 esi, esp
  00239	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0023e	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv276[ebp], eax
  00244	8b f4		 mov	 esi, esp
  00246	0f b6 45 0c	 movzx	 eax, BYTE PTR __Ch$[ebp]
  0024a	50		 push	 eax
  0024b	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR tv276[ebp]
  00251	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  00257	3b f4		 cmp	 esi, esp
  00259	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0025e	89 85 a4 fe ff
	ff		 mov	 DWORD PTR tv277[ebp], eax
  00264	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv277[ebp]
  0026a	89 8d e0 fe ff
	ff		 mov	 DWORD PTR $T6[ebp], ecx
  00270	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  00275	89 85 d4 fe ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
  0027b	8d 95 e0 fe ff
	ff		 lea	 edx, DWORD PTR $T6[ebp]
  00281	52		 push	 edx
  00282	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  00288	50		 push	 eax
  00289	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  0028e	83 c4 08	 add	 esp, 8
  00291	0f b6 c8	 movzx	 ecx, al
  00294	85 c9		 test	 ecx, ecx
  00296	74 09		 je	 SHORT $LN12@operator

; 799  :             _State |= ios_base::badbit;

  00298	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  0029b	83 c8 04	 or	 eax, 4
  0029e	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax
$LN12@operator:

; 800  :         }
; 801  : 
; 802  :         for (; _State == ios_base::goodbit && 0 < _Pad; --_Pad) { // pad on right

  002a1	eb 12		 jmp	 SHORT $LN7@operator
$LN5@operator:
  002a3	8b 45 c4	 mov	 eax, DWORD PTR __Pad$9[ebp]
  002a6	83 e8 01	 sub	 eax, 1
  002a9	8b 4d c8	 mov	 ecx, DWORD PTR __Pad$9[ebp+4]
  002ac	83 d9 00	 sbb	 ecx, 0
  002af	89 45 c4	 mov	 DWORD PTR __Pad$9[ebp], eax
  002b2	89 4d c8	 mov	 DWORD PTR __Pad$9[ebp+4], ecx
$LN7@operator:
  002b5	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  002b9	0f 85 bf 00 00
	00		 jne	 $LN6@operator
  002bf	83 7d c8 00	 cmp	 DWORD PTR __Pad$9[ebp+4], 0
  002c3	0f 8c b5 00 00
	00		 jl	 $LN6@operator
  002c9	7f 0a		 jg	 SHORT $LN24@operator
  002cb	83 7d c4 00	 cmp	 DWORD PTR __Pad$9[ebp], 0
  002cf	0f 86 a9 00 00
	00		 jbe	 $LN6@operator
$LN24@operator:

; 803  :             if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  002d5	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  002d8	8b 08		 mov	 ecx, DWORD PTR [eax]
  002da	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  002dd	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  002e0	8b f4		 mov	 esi, esp
  002e2	8b ca		 mov	 ecx, edx
  002e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  002ea	3b f4		 cmp	 esi, esp
  002ec	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002f1	88 85 ab fe ff
	ff		 mov	 BYTE PTR tv278[ebp], al
  002f7	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  002fa	8b 08		 mov	 ecx, DWORD PTR [eax]
  002fc	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  002ff	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00302	8b f4		 mov	 esi, esp
  00304	8b ca		 mov	 ecx, edx
  00306	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0030c	3b f4		 cmp	 esi, esp
  0030e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00313	89 85 a4 fe ff
	ff		 mov	 DWORD PTR tv279[ebp], eax
  00319	8b f4		 mov	 esi, esp
  0031b	0f b6 85 ab fe
	ff ff		 movzx	 eax, BYTE PTR tv278[ebp]
  00322	50		 push	 eax
  00323	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv279[ebp]
  00329	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  0032f	3b f4		 cmp	 esi, esp
  00331	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00336	89 85 a0 fe ff
	ff		 mov	 DWORD PTR tv280[ebp], eax
  0033c	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR tv280[ebp]
  00342	89 8d c8 fe ff
	ff		 mov	 DWORD PTR $T4[ebp], ecx
  00348	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  0034d	89 85 bc fe ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  00353	8d 95 c8 fe ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  00359	52		 push	 edx
  0035a	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  00360	50		 push	 eax
  00361	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00366	83 c4 08	 add	 esp, 8
  00369	0f b6 c8	 movzx	 ecx, al
  0036c	85 c9		 test	 ecx, ecx
  0036e	74 09		 je	 SHORT $LN13@operator

; 804  :                 _State |= ios_base::badbit;

  00370	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00373	83 c8 04	 or	 eax, 4
  00376	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax
$LN13@operator:

; 805  :             }
; 806  :         }

  00379	e9 25 ff ff ff	 jmp	 $LN5@operator
$LN6@operator:
  0037e	eb 26		 jmp	 SHORT $LN17@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$0:

; 807  :         _CATCH_IO_(ios_base, _Ostr)

  00380	8b f4		 mov	 esi, esp
  00382	6a 01		 push	 1
  00384	6a 04		 push	 4
  00386	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00389	8b 08		 mov	 ecx, DWORD PTR [eax]
  0038b	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0038e	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00391	8b ca		 mov	 ecx, edx
  00393	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  00399	3b f4		 cmp	 esi, esp
  0039b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003a0	b8 00 00 00 00	 mov	 eax, $LN21@operator
  003a5	c3		 ret	 0
$LN17@operator:
  003a6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  003ad	eb 07		 jmp	 SHORT $LN8@operator
$LN21@operator:
  003af	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN8@operator:

; 808  :     }
; 809  : 
; 810  :     _Ostr.width(0);

  003b6	8b f4		 mov	 esi, esp
  003b8	6a 00		 push	 0
  003ba	6a 00		 push	 0
  003bc	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003bf	8b 08		 mov	 ecx, DWORD PTR [eax]
  003c1	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  003c4	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  003c7	8b ca		 mov	 ecx, edx
  003c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QAE_J_J@Z
  003cf	3b f4		 cmp	 esi, esp
  003d1	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 811  :     _Ostr.setstate(_State);

  003d6	8b f4		 mov	 esi, esp
  003d8	6a 00		 push	 0
  003da	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  003dd	50		 push	 eax
  003de	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  003e1	8b 11		 mov	 edx, DWORD PTR [ecx]
  003e3	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  003e6	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  003e9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  003ef	3b f4		 cmp	 esi, esp
  003f1	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 812  :     return _Ostr;

  003f6	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003f9	89 85 b0 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  003ff	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00406	8d 4d d4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00409	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0040e	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]

; 813  : }

  00414	52		 push	 edx
  00415	8b cd		 mov	 ecx, ebp
  00417	50		 push	 eax
  00418	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN28@operator
  0041e	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00423	58		 pop	 eax
  00424	5a		 pop	 edx
  00425	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00428	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0042f	59		 pop	 ecx
  00430	5f		 pop	 edi
  00431	5e		 pop	 esi
  00432	5b		 pop	 ebx
  00433	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00436	33 cd		 xor	 ecx, ebp
  00438	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0043d	81 c4 64 01 00
	00		 add	 esp, 356		; 00000164H
  00443	3b ec		 cmp	 ebp, esp
  00445	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0044a	8b e5		 mov	 esp, ebp
  0044c	5d		 pop	 ebp
  0044d	c3		 ret	 0
  0044e	66 90		 npad	 2
$LN28@operator:
  00450	01 00 00 00	 DD	 1
  00454	00 00 00 00	 DD	 $LN27@operator
$LN27@operator:
  00458	d4 ff ff ff	 DD	 -44			; ffffffd4H
  0045c	08 00 00 00	 DD	 8
  00460	00 00 00 00	 DD	 $LN25@operator
$LN25@operator:
  00464	5f		 DB	 95			; 0000005fH
  00465	4f		 DB	 79			; 0000004fH
  00466	6b		 DB	 107			; 0000006bH
  00467	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$2:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a 98 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-360]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z ENDP ; std::operator<<<std::char_traits<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
tv135 = -356						; size = 8
tv343 = -348						; size = 8
tv291 = -344						; size = 4
tv288 = -344						; size = 8
tv286 = -344						; size = 4
tv329 = -340						; size = 8
tv290 = -340						; size = 4
tv285 = -340						; size = 4
tv287 = -336						; size = 4
tv137 = -336						; size = 4
tv289 = -333						; size = 1
tv284 = -333						; size = 1
$T2 = -328						; size = 4
$T3 = -316						; size = 4
$T4 = -304						; size = 4
$T5 = -292						; size = 4
$T6 = -280						; size = 4
__Ok$ = -76						; size = 8
__Pad$ = -60						; size = 8
__Count$ = -44						; size = 8
__State$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 734  :     const char* _Val) { // insert NTBS into char stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec 54 01 00
	00		 sub	 esp, 340		; 00000154H
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8d bd 5c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-164]
  00021	b9 25 00 00 00	 mov	 ecx, 37			; 00000025H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00032	33 c5		 xor	 eax, ebp
  00034	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00037	50		 push	 eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0003b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00041	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00044	b9 00 00 00 00	 mov	 ecx, OFFSET __C12F3EA4_ostream
  00049	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 735  :     using _Elem = char;
; 736  :     using _Myos = basic_ostream<_Elem, _Traits>;
; 737  : 
; 738  :     ios_base::iostate _State = ios_base::goodbit;

  0004e	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 739  :     streamsize _Count        = static_cast<streamsize>(_Traits::length(_Val));

  00055	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ; std::_Narrow_char_traits<char,int>::length
  0005e	83 c4 04	 add	 esp, 4
  00061	33 c9		 xor	 ecx, ecx
  00063	89 45 d4	 mov	 DWORD PTR __Count$[ebp], eax
  00066	89 4d d8	 mov	 DWORD PTR __Count$[ebp+4], ecx

; 740  :     streamsize _Pad          = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;

  00069	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0006c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006e	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00071	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00074	8b f4		 mov	 esi, esp
  00076	8b ca		 mov	 ecx, edx
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  0007e	3b f4		 cmp	 esi, esp
  00080	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00085	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv329[ebp], eax
  0008b	89 95 b0 fe ff
	ff		 mov	 DWORD PTR tv329[ebp+4], edx
  00091	83 bd b0 fe ff
	ff 00		 cmp	 DWORD PTR tv329[ebp+4], 0
  00098	7c 79		 jl	 SHORT $LN17@operator
  0009a	7f 09		 jg	 SHORT $LN24@operator
  0009c	83 bd ac fe ff
	ff 00		 cmp	 DWORD PTR tv329[ebp], 0
  000a3	76 6e		 jbe	 SHORT $LN17@operator
$LN24@operator:
  000a5	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000a8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000aa	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000ad	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000b0	8b f4		 mov	 esi, esp
  000b2	8b ca		 mov	 ecx, edx
  000b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000ba	3b f4		 cmp	 esi, esp
  000bc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c1	89 85 a4 fe ff
	ff		 mov	 DWORD PTR tv343[ebp], eax
  000c7	89 95 a8 fe ff
	ff		 mov	 DWORD PTR tv343[ebp+4], edx
  000cd	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR tv343[ebp+4]
  000d3	3b 45 d8	 cmp	 eax, DWORD PTR __Count$[ebp+4]
  000d6	7c 3b		 jl	 SHORT $LN17@operator
  000d8	7f 0b		 jg	 SHORT $LN25@operator
  000da	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv343[ebp]
  000e0	3b 4d d4	 cmp	 ecx, DWORD PTR __Count$[ebp]
  000e3	76 2e		 jbe	 SHORT $LN17@operator
$LN25@operator:
  000e5	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000e8	8b 02		 mov	 eax, DWORD PTR [edx]
  000ea	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  000ed	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  000f0	8b f4		 mov	 esi, esp
  000f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000f8	3b f4		 cmp	 esi, esp
  000fa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ff	2b 45 d4	 sub	 eax, DWORD PTR __Count$[ebp]
  00102	1b 55 d8	 sbb	 edx, DWORD PTR __Count$[ebp+4]
  00105	89 85 9c fe ff
	ff		 mov	 DWORD PTR tv135[ebp], eax
  0010b	89 95 a0 fe ff
	ff		 mov	 DWORD PTR tv135[ebp+4], edx
  00111	eb 0c		 jmp	 SHORT $LN18@operator
$LN17@operator:
  00113	c5 f8 57 c0	 vxorps	 xmm0, xmm0, xmm0
  00117	c5 f9 13 85 9c
	fe ff ff	 vmovlpd QWORD PTR tv135[ebp], xmm0
$LN18@operator:
  0011f	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR tv135[ebp]
  00125	8b 95 a0 fe ff
	ff		 mov	 edx, DWORD PTR tv135[ebp+4]
  0012b	89 4d c4	 mov	 DWORD PTR __Pad$[ebp], ecx
  0012e	89 55 c8	 mov	 DWORD PTR __Pad$[ebp+4], edx

; 741  :     const typename _Myos::sentry _Ok(_Ostr);

  00131	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00134	50		 push	 eax
  00135	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00138	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  0013d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 742  : 
; 743  :     if (!_Ok) {

  00144	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00147	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  0014c	0f b6 c0	 movzx	 eax, al
  0014f	85 c0		 test	 eax, eax
  00151	75 0e		 jne	 SHORT $LN8@operator

; 744  :         _State |= ios_base::badbit;

  00153	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00156	83 c8 04	 or	 eax, 4
  00159	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 745  :     } else { // state okay, insert

  0015c	e9 ba 02 00 00	 jmp	 $LN9@operator
$LN8@operator:

; 746  :         _TRY_IO_BEGIN

  00161	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 747  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

  00165	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00168	8b 08		 mov	 ecx, DWORD PTR [eax]
  0016a	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0016d	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00170	8b f4		 mov	 esi, esp
  00172	8b ca		 mov	 ecx, edx
  00174	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
  0017a	3b f4		 cmp	 esi, esp
  0017c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00181	89 85 b0 fe ff
	ff		 mov	 DWORD PTR tv137[ebp], eax
  00187	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR tv137[ebp]
  0018d	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00192	83 f8 40	 cmp	 eax, 64			; 00000040H
  00195	0f 84 d5 00 00
	00		 je	 $LN11@operator

; 748  :             for (; 0 < _Pad; --_Pad) { // pad on left

  0019b	eb 12		 jmp	 SHORT $LN4@operator
$LN2@operator:
  0019d	8b 45 c4	 mov	 eax, DWORD PTR __Pad$[ebp]
  001a0	83 e8 01	 sub	 eax, 1
  001a3	8b 4d c8	 mov	 ecx, DWORD PTR __Pad$[ebp+4]
  001a6	83 d9 00	 sbb	 ecx, 0
  001a9	89 45 c4	 mov	 DWORD PTR __Pad$[ebp], eax
  001ac	89 4d c8	 mov	 DWORD PTR __Pad$[ebp+4], ecx
$LN4@operator:
  001af	83 7d c8 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  001b3	0f 8c b7 00 00
	00		 jl	 $LN11@operator
  001b9	7f 0a		 jg	 SHORT $LN26@operator
  001bb	83 7d c4 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  001bf	0f 86 ab 00 00
	00		 jbe	 $LN11@operator
$LN26@operator:

; 749  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  001c5	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  001c8	8b 08		 mov	 ecx, DWORD PTR [eax]
  001ca	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  001cd	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001d0	8b f4		 mov	 esi, esp
  001d2	8b ca		 mov	 ecx, edx
  001d4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  001da	3b f4		 cmp	 esi, esp
  001dc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001e1	88 85 b3 fe ff
	ff		 mov	 BYTE PTR tv284[ebp], al
  001e7	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  001ea	8b 08		 mov	 ecx, DWORD PTR [eax]
  001ec	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  001ef	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001f2	8b f4		 mov	 esi, esp
  001f4	8b ca		 mov	 ecx, edx
  001f6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001fc	3b f4		 cmp	 esi, esp
  001fe	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00203	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv285[ebp], eax
  00209	8b f4		 mov	 esi, esp
  0020b	0f b6 85 b3 fe
	ff ff		 movzx	 eax, BYTE PTR tv284[ebp]
  00212	50		 push	 eax
  00213	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv285[ebp]
  00219	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  0021f	3b f4		 cmp	 esi, esp
  00221	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00226	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv286[ebp], eax
  0022c	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR tv286[ebp]
  00232	89 8d e8 fe ff
	ff		 mov	 DWORD PTR $T6[ebp], ecx
  00238	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  0023d	89 85 dc fe ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
  00243	8d 95 e8 fe ff
	ff		 lea	 edx, DWORD PTR $T6[ebp]
  00249	52		 push	 edx
  0024a	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  00250	50		 push	 eax
  00251	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00256	83 c4 08	 add	 esp, 8
  00259	0f b6 c8	 movzx	 ecx, al
  0025c	85 c9		 test	 ecx, ecx
  0025e	74 0b		 je	 SHORT $LN12@operator

; 750  :                     _State |= ios_base::badbit; // insertion failed, quit

  00260	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00263	83 c8 04	 or	 eax, 4
  00266	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 751  :                     break;

  00269	eb 05		 jmp	 SHORT $LN11@operator
$LN12@operator:

; 752  :                 }
; 753  :             }

  0026b	e9 2d ff ff ff	 jmp	 $LN2@operator
$LN11@operator:

; 754  :         }
; 755  : 
; 756  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

  00270	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  00274	75 6e		 jne	 SHORT $LN13@operator
  00276	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00279	8b 08		 mov	 ecx, DWORD PTR [eax]
  0027b	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0027e	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00281	8b f4		 mov	 esi, esp
  00283	8b ca		 mov	 ecx, edx
  00285	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0028b	3b f4		 cmp	 esi, esp
  0028d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00292	89 85 b0 fe ff
	ff		 mov	 DWORD PTR tv287[ebp], eax
  00298	8b f4		 mov	 esi, esp
  0029a	8b 45 d8	 mov	 eax, DWORD PTR __Count$[ebp+4]
  0029d	50		 push	 eax
  0029e	8b 4d d4	 mov	 ecx, DWORD PTR __Count$[ebp]
  002a1	51		 push	 ecx
  002a2	8b 55 0c	 mov	 edx, DWORD PTR __Val$[ebp]
  002a5	52		 push	 edx
  002a6	8b 8d b0 fe ff
	ff		 mov	 ecx, DWORD PTR tv287[ebp]
  002ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
  002b2	3b f4		 cmp	 esi, esp
  002b4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002b9	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv288[ebp], eax
  002bf	89 95 ac fe ff
	ff		 mov	 DWORD PTR tv288[ebp+4], edx
  002c5	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR tv288[ebp]
  002cb	3b 45 d4	 cmp	 eax, DWORD PTR __Count$[ebp]
  002ce	75 0b		 jne	 SHORT $LN27@operator
  002d0	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv288[ebp+4]
  002d6	3b 4d d8	 cmp	 ecx, DWORD PTR __Count$[ebp+4]
  002d9	74 09		 je	 SHORT $LN13@operator
$LN27@operator:

; 757  :             _State |= ios_base::badbit;

  002db	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  002de	83 c8 04	 or	 eax, 4
  002e1	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax
$LN13@operator:

; 758  :         }
; 759  : 
; 760  :         if (_State == ios_base::goodbit) {

  002e4	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  002e8	0f 85 d5 00 00
	00		 jne	 $LN14@operator

; 761  :             for (; 0 < _Pad; --_Pad) { // pad on right

  002ee	eb 12		 jmp	 SHORT $LN7@operator
$LN5@operator:
  002f0	8b 45 c4	 mov	 eax, DWORD PTR __Pad$[ebp]
  002f3	83 e8 01	 sub	 eax, 1
  002f6	8b 4d c8	 mov	 ecx, DWORD PTR __Pad$[ebp+4]
  002f9	83 d9 00	 sbb	 ecx, 0
  002fc	89 45 c4	 mov	 DWORD PTR __Pad$[ebp], eax
  002ff	89 4d c8	 mov	 DWORD PTR __Pad$[ebp+4], ecx
$LN7@operator:
  00302	83 7d c8 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  00306	0f 8c b7 00 00
	00		 jl	 $LN14@operator
  0030c	7f 0a		 jg	 SHORT $LN28@operator
  0030e	83 7d c4 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  00312	0f 86 ab 00 00
	00		 jbe	 $LN14@operator
$LN28@operator:

; 762  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00318	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0031b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0031d	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00320	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00323	8b f4		 mov	 esi, esp
  00325	8b ca		 mov	 ecx, edx
  00327	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  0032d	3b f4		 cmp	 esi, esp
  0032f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00334	88 85 b3 fe ff
	ff		 mov	 BYTE PTR tv289[ebp], al
  0033a	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0033d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0033f	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00342	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00345	8b f4		 mov	 esi, esp
  00347	8b ca		 mov	 ecx, edx
  00349	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0034f	3b f4		 cmp	 esi, esp
  00351	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00356	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv290[ebp], eax
  0035c	8b f4		 mov	 esi, esp
  0035e	0f b6 85 b3 fe
	ff ff		 movzx	 eax, BYTE PTR tv289[ebp]
  00365	50		 push	 eax
  00366	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv290[ebp]
  0036c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  00372	3b f4		 cmp	 esi, esp
  00374	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00379	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv291[ebp], eax
  0037f	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR tv291[ebp]
  00385	89 8d d0 fe ff
	ff		 mov	 DWORD PTR $T4[ebp], ecx
  0038b	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  00390	89 85 c4 fe ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  00396	8d 95 d0 fe ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  0039c	52		 push	 edx
  0039d	8d 85 c4 fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  003a3	50		 push	 eax
  003a4	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  003a9	83 c4 08	 add	 esp, 8
  003ac	0f b6 c8	 movzx	 ecx, al
  003af	85 c9		 test	 ecx, ecx
  003b1	74 0b		 je	 SHORT $LN15@operator

; 763  :                     _State |= ios_base::badbit; // insertion failed, quit

  003b3	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  003b6	83 c8 04	 or	 eax, 4
  003b9	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 764  :                     break;

  003bc	eb 05		 jmp	 SHORT $LN14@operator
$LN15@operator:

; 765  :                 }
; 766  :             }

  003be	e9 2d ff ff ff	 jmp	 $LN5@operator
$LN14@operator:

; 767  :         }
; 768  : 
; 769  :         _Ostr.width(0);

  003c3	8b f4		 mov	 esi, esp
  003c5	6a 00		 push	 0
  003c7	6a 00		 push	 0
  003c9	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003cc	8b 08		 mov	 ecx, DWORD PTR [eax]
  003ce	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  003d1	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  003d4	8b ca		 mov	 ecx, edx
  003d6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QAE_J_J@Z
  003dc	3b f4		 cmp	 esi, esp
  003de	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003e3	eb 26		 jmp	 SHORT $LN19@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:

; 770  :         _CATCH_IO_(ios_base, _Ostr)

  003e5	8b f4		 mov	 esi, esp
  003e7	6a 01		 push	 1
  003e9	6a 04		 push	 4
  003eb	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003ee	8b 08		 mov	 ecx, DWORD PTR [eax]
  003f0	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  003f3	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  003f6	8b ca		 mov	 ecx, edx
  003f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  003fe	3b f4		 cmp	 esi, esp
  00400	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00405	b8 00 00 00 00	 mov	 eax, $LN23@operator
  0040a	c3		 ret	 0
$LN19@operator:
  0040b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00412	eb 07		 jmp	 SHORT $LN9@operator
$LN23@operator:
  00414	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN9@operator:

; 771  :     }
; 772  : 
; 773  :     _Ostr.setstate(_State);

  0041b	8b f4		 mov	 esi, esp
  0041d	6a 00		 push	 0
  0041f	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00422	50		 push	 eax
  00423	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00426	8b 11		 mov	 edx, DWORD PTR [ecx]
  00428	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0042b	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0042e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  00434	3b f4		 cmp	 esi, esp
  00436	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 774  :     return _Ostr;

  0043b	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0043e	89 85 b8 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00444	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0044b	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0044e	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00453	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]

; 775  : }

  00459	52		 push	 edx
  0045a	8b cd		 mov	 ecx, ebp
  0045c	50		 push	 eax
  0045d	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN32@operator
  00463	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00468	58		 pop	 eax
  00469	5a		 pop	 edx
  0046a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0046d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00474	59		 pop	 ecx
  00475	5f		 pop	 edi
  00476	5e		 pop	 esi
  00477	5b		 pop	 ebx
  00478	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0047b	33 cd		 xor	 ecx, ebp
  0047d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00482	81 c4 64 01 00
	00		 add	 esp, 356		; 00000164H
  00488	3b ec		 cmp	 ebp, esp
  0048a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0048f	8b e5		 mov	 esp, ebp
  00491	5d		 pop	 ebp
  00492	c3		 ret	 0
  00493	90		 npad	 1
$LN32@operator:
  00494	01 00 00 00	 DD	 1
  00498	00 00 00 00	 DD	 $LN31@operator
$LN31@operator:
  0049c	b4 ff ff ff	 DD	 -76			; ffffffb4H
  004a0	08 00 00 00	 DD	 8
  004a4	00 00 00 00	 DD	 $LN29@operator
$LN29@operator:
  004a8	5f		 DB	 95			; 0000005fH
  004a9	4f		 DB	 79			; 0000004fH
  004aa	6b		 DB	 107			; 0000006bH
  004ab	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
  00000	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a 98 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-360]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Giovanny.O\source\repos\IntegerAddition\IntegerAddition\IntegerAddition.cpp
;	COMDAT _main
_TEXT	SEGMENT
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
_main	PROC						; COMDAT

; 14   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __BB5F3E13_IntegerAddition@cpp
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 15   : 	cout << "Before GlChar: " << GlChar <<"\n";

  00021	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  00026	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _GlChar
  0002d	50		 push	 eax
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@EFPPDKIJ@Before?5GlChar?3?5@
  00033	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00039	51		 push	 ecx
  0003a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0003f	83 c4 08	 add	 esp, 8
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z ; std::operator<<<std::char_traits<char> >
  00048	83 c4 08	 add	 esp, 8
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00051	83 c4 08	 add	 esp, 8

; 16   : 	cout << "       GlChar: " << GlShort << "\n";

  00054	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  00059	8b f4		 mov	 esi, esp
  0005b	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _GlShort
  00062	50		 push	 eax
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FGLLNOHM@?5?5?5?5?5?5?5GlChar?3?5@
  00068	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0006e	51		 push	 ecx
  0006f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00074	83 c4 08	 add	 esp, 8
  00077	8b c8		 mov	 ecx, eax
  00079	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@F@Z
  0007f	3b f4		 cmp	 esi, esp
  00081	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0008c	83 c4 08	 add	 esp, 8

; 17   : 	cout << "       GlChar: " << GlInt << "\n";

  0008f	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  00094	8b f4		 mov	 esi, esp
  00096	a1 00 00 00 00	 mov	 eax, DWORD PTR _GlInt
  0009b	50		 push	 eax
  0009c	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FGLLNOHM@?5?5?5?5?5?5?5GlChar?3?5@
  000a1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  000a7	51		 push	 ecx
  000a8	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000ad	83 c4 08	 add	 esp, 8
  000b0	8b c8		 mov	 ecx, eax
  000b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  000b8	3b f4		 cmp	 esi, esp
  000ba	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bf	50		 push	 eax
  000c0	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000c5	83 c4 08	 add	 esp, 8

; 18   : 	cout << "       GlChar: " << GlLongLong << "\n\n";

  000c8	68 00 00 00 00	 push	 OFFSET ??_C@_02PHMGELLB@?6?6@
  000cd	8b f4		 mov	 esi, esp
  000cf	a1 04 00 00 00	 mov	 eax, DWORD PTR _GlLongLong+4
  000d4	50		 push	 eax
  000d5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _GlLongLong
  000db	51		 push	 ecx
  000dc	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FGLLNOHM@?5?5?5?5?5?5?5GlChar?3?5@
  000e1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  000e7	52		 push	 edx
  000e8	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000ed	83 c4 08	 add	 esp, 8
  000f0	8b c8		 mov	 ecx, eax
  000f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_J@Z
  000f8	3b f4		 cmp	 esi, esp
  000fa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ff	50		 push	 eax
  00100	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00105	83 c4 08	 add	 esp, 8

; 19   : 
; 20   : 	IntegerAddition_(3, 5, -37, 11);

  00108	6a 00		 push	 0
  0010a	6a 0b		 push	 11			; 0000000bH
  0010c	6a db		 push	 -37			; ffffffdbH
  0010e	6a 05		 push	 5
  00110	6a 03		 push	 3
  00112	e8 00 00 00 00	 call	 _IntegerAddition_
  00117	83 c4 14	 add	 esp, 20			; 00000014H

; 21   : 
; 22   : 	cout << "After GlChar: " << GlChar << "\n";

  0011a	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  0011f	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _GlChar
  00126	50		 push	 eax
  00127	68 00 00 00 00	 push	 OFFSET ??_C@_0P@HJHDDGBN@After?5GlChar?3?5@
  0012c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00132	51		 push	 ecx
  00133	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00138	83 c4 08	 add	 esp, 8
  0013b	50		 push	 eax
  0013c	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z ; std::operator<<<std::char_traits<char> >
  00141	83 c4 08	 add	 esp, 8
  00144	50		 push	 eax
  00145	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0014a	83 c4 08	 add	 esp, 8

; 23   : 	cout << "       GlChar: " << GlShort << "\n";

  0014d	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  00152	8b f4		 mov	 esi, esp
  00154	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _GlShort
  0015b	50		 push	 eax
  0015c	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FGLLNOHM@?5?5?5?5?5?5?5GlChar?3?5@
  00161	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00167	51		 push	 ecx
  00168	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0016d	83 c4 08	 add	 esp, 8
  00170	8b c8		 mov	 ecx, eax
  00172	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@F@Z
  00178	3b f4		 cmp	 esi, esp
  0017a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0017f	50		 push	 eax
  00180	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00185	83 c4 08	 add	 esp, 8

; 24   : 	cout << "       GlChar: " << GlInt << "\n";

  00188	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  0018d	8b f4		 mov	 esi, esp
  0018f	a1 00 00 00 00	 mov	 eax, DWORD PTR _GlInt
  00194	50		 push	 eax
  00195	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FGLLNOHM@?5?5?5?5?5?5?5GlChar?3?5@
  0019a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  001a0	51		 push	 ecx
  001a1	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  001a6	83 c4 08	 add	 esp, 8
  001a9	8b c8		 mov	 ecx, eax
  001ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  001b1	3b f4		 cmp	 esi, esp
  001b3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001b8	50		 push	 eax
  001b9	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  001be	83 c4 08	 add	 esp, 8

; 25   : 	cout << "       GlChar: " << GlLongLong << "\n\n";

  001c1	68 00 00 00 00	 push	 OFFSET ??_C@_02PHMGELLB@?6?6@
  001c6	8b f4		 mov	 esi, esp
  001c8	a1 04 00 00 00	 mov	 eax, DWORD PTR _GlLongLong+4
  001cd	50		 push	 eax
  001ce	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _GlLongLong
  001d4	51		 push	 ecx
  001d5	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FGLLNOHM@?5?5?5?5?5?5?5GlChar?3?5@
  001da	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  001e0	52		 push	 edx
  001e1	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  001e6	83 c4 08	 add	 esp, 8
  001e9	8b c8		 mov	 ecx, eax
  001eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_J@Z
  001f1	3b f4		 cmp	 esi, esp
  001f3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001f8	50		 push	 eax
  001f9	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  001fe	83 c4 08	 add	 esp, 8

; 26   : 
; 27   : 	return (0);

  00201	33 c0		 xor	 eax, eax

; 28   : }

  00203	5f		 pop	 edi
  00204	5e		 pop	 esi
  00205	5b		 pop	 ebx
  00206	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0020c	3b ec		 cmp	 ebp, esp
  0020e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00213	8b e5		 mov	 esp, ebp
  00215	5d		 pop	 ebp
  00216	c3		 ret	 0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ PROC		; std::_Narrow_char_traits<char,int>::eof, COMDAT

; 477  :     _NODISCARD static constexpr int_type eof() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __0D019051_xstring
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 478  :         return static_cast<int_type>(EOF);

  00021	83 c8 ff	 or	 eax, -1

; 479  :     }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ENDP		; std::_Narrow_char_traits<char,int>::eof
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z
_TEXT	SEGMENT
tv65 = -196						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z PROC ; std::_Narrow_char_traits<char,int>::eq_int_type, COMDAT

; 469  :     _NODISCARD static constexpr bool eq_int_type(const int_type& _Left, const int_type& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d fc	 lea	 edi, DWORD PTR [ebp-4]
  0000f	b9 01 00 00 00	 mov	 ecx, 1
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __0D019051_xstring
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 470  :         return _Left == _Right;

  00025	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00028	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0002b	8b 10		 mov	 edx, DWORD PTR [eax]
  0002d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0002f	75 0c		 jne	 SHORT $LN3@eq_int_typ
  00031	c7 85 3c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv65[ebp], 1
  0003b	eb 0a		 jmp	 SHORT $LN4@eq_int_typ
$LN3@eq_int_typ:
  0003d	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv65[ebp], 0
$LN4@eq_int_typ:
  00047	8a 85 3c ff ff
	ff		 mov	 al, BYTE PTR tv65[ebp]

; 471  :     }

  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx
  00050	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00056	3b ec		 cmp	 ebp, esp
  00058	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ENDP ; std::_Narrow_char_traits<char,int>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z PROC	; std::_Narrow_char_traits<char,int>::length, COMDAT

; 396  :     _NODISCARD static _CONSTEXPR17 size_t length(_In_z_ const _Elem* const _First) noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __0D019051_xstring
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 397  :         // find length of null-terminated string
; 398  : #if _HAS_CXX17
; 399  : #ifdef __cpp_char8_t
; 400  :         if constexpr (is_same_v<_Elem, char8_t>) {
; 401  : #if _HAS_U8_INTRINSICS
; 402  :             return __builtin_u8strlen(_First);
; 403  : #else // ^^^ use u8 intrinsics / no u8 intrinsics vvv
; 404  :             return _Primary_char_traits::length(_First);
; 405  : #endif // _HAS_U8_INTRINSICS
; 406  :         } else
; 407  : #endif // __cpp_char8_t
; 408  :         {
; 409  :             return __builtin_strlen(_First);
; 410  :         }
; 411  : #else // _HAS_CXX17
; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00021	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 _strlen
  0002a	83 c4 04	 add	 esp, 4

; 413  : #endif // _HAS_CXX17
; 414  :     }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ENDP	; std::_Narrow_char_traits<char,int>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Giovanny.O\source\repos\IntegerAddition\IntegerAddition\IntegerAddition.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __BB5F3E13_IntegerAddition@cpp
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Giovanny.O\source\repos\IntegerAddition\IntegerAddition\IntegerAddition.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __BB5F3E13_IntegerAddition@cpp
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
