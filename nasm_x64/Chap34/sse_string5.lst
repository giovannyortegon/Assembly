     1                                  ; sse_string5.asm
     2                                  ; find a range of characters
     3                                  section .data
     4 00000000 6565416563646B6B46-     	string1			db "eeAecdkkFijlmeoZa"
     4 00000009 696A6C6D656F5A61   
     5 00000011 6263656667654B6C6B-     					db "bcefgeKlkmeDad"
     5 0000001A 6D65446164         
     6 0000001F 666473616661646661-     					db "fdsafadfaseeE", 10, 0
     6 00000028 736565450A00       
     7 0000002E 410A00                  	startrange		db "A", 10, 0					; Look for upper case
     8 00000031 5A0A00                  	stoprange		db "Z", 10, 0
     9 00000034 0A00                    	NL				db 10, 0
    10 00000036 46696E642074686520-     	fmt				db "Find the uppercase letters in: ", 10, 0
    10 0000003F 757070657263617365-
    10 00000048 206C65747465727320-
    10 00000051 696E3A200A00       
    11 00000057 4920666F756E642025-     	fmt_oc			db "I found %ld uppercase letters", 10, 0
    11 00000060 6C6420757070657263-
    11 00000069 617365206C65747465-
    11 00000072 72730A00           
    12                                  section .bss
    13                                  section .text
    14                                  	global main
    15                                  	extern print16b
    16                                  	extern printf
    17                                  main:
    18 00000000 55                      	push rbp
    19 00000001 4889E5                  	mov rbp, rsp
    20                                  
    21                                  ; first print the string
    22 00000004 48BF-                   	mov rdi, fmt						; title
    22 00000006 [3600000000000000] 
    23 0000000E 4831C0                  	xor rax, rax
    24 00000011 E8(00000000)            	call printf
    25                                  
    26 00000016 48BF-                   	mov rdi, string1					; string
    26 00000018 [0000000000000000] 
    27 00000020 4831C0                  	xor rax, rax
    28 00000023 E8(00000000)            	call printf
    29                                  
    30                                  ; search the string
    31 00000028 48BF-                   	mov rdi, string1
    31 0000002A [0000000000000000] 
    32 00000032 48BE-                   	mov rsi, startrange
    32 00000034 [2E00000000000000] 
    33 0000003C 48BA-                   	mov rdx, stoprange
    33 0000003E [3100000000000000] 
    34 00000046 E817000000              	call prangesrch
    35                                  
    36                                  ; print the number of occurences
    37 0000004B 48BF-                   	mov rdi, fmt_oc
    37 0000004D [5700000000000000] 
    38 00000055 4889C6                  	mov rsi, rax
    39 00000058 4831C0                  	xor rax, rax
    40 0000005B E8(00000000)            	call printf
    41                                  
    42 00000060 C9                      	leave
    43 00000061 C3                      	ret
    44                                  
    45                                  ; -----------------------------------------------
    46                                  ; function searching for and printing the mask
    47                                  prangesrch:							; packed range search
    48 00000062 55                      	push rbp
    49 00000063 4889E5                  	mov rbp, rsp
    50 00000066 4883EC10                	sub rsp, 16						; room for pushing xmml
    51                                  
    52 0000006A 4D31E4                  	xor r12, r12					; for the number of occurences
    53 0000006D 4831C9                  	xor rcx, rcx					; for signaling the end
    54 00000070 4831DB                  	xor rbx, rbx					; for address calculation
    55 00000073 48C7C0F0FFFFFF          	mov rax, -16					; avoid ZF flag setting
    56                                  
    57                                  	; build xmm1
    58 0000007A 660FEFC9                	pxor xmm1, xmm1					; make sure everything is cleared
    59 0000007E 660F3A200E00            	pinsrb xmm1, byte[rsi], 0		; stratrange at index 0
    60 00000084 660F3A200A01            	pinsrb xmm1, byte[rdx], 1		; stoprange at index 1
    61                                  
    62                                  .loop:
    63 0000008A 4883C010                	add rax, 16
    64 0000008E BE10000000              	mov rsi, 16						; if no terminating 0, print 16 bytes
    65 00000093 F30F6F141F              	movdqu xmm2, [rdi + rbx]
    66 00000098 660F3A62CA44            	pcmpistrm xmm1, xmm2, 01000100b	; equal each byte mask in xmm0
    67 0000009E 0F94C1                  	setz cl;						; terminating 0 detected
    68                                  ; if terminating 0 found, determine position
    69 000000A1 80F900                  	cmp cl, 0
    70 000000A4 7410                    	je .gotoprint					; no terminating 0 found
    71                                  
    72                                  ; terminating null found
    73                                  ; less than 16 bytes left
    74                                  ; rdi contains address of string
    75                                  ; rbx contains #bytes in blocks handled so far
    76 000000A6 4801DF                  	add rdi, rbx					; take only the tail of the string
    77 000000A9 51                      	push rcx						; caller saved (cl in use)
    78 000000AA E832000000              	call pstrlen					; determine the position of the 0
    79 000000AF 59                      	pop rcx							; caller saved
    80 000000B0 48FFC8                  	dec rax							; length without 0
    81 000000B3 4889C6                  	mov rsi, rax					; bytes in tail
    82                                  
    83                                  ; print the mask
    84                                  .gotoprint:
    85 000000B6 E855000000              	call print_mask
    86                                  ; keep running total of matches
    87 000000BB F3450FB8ED              	popcnt r13d, r13d				; count the number of 1 bit
    88 000000C0 4501EC                  	add r12d, r13d					; keep the number of occurences in r12
    89 000000C3 08C9                    	or cl, cl						; terminating 0 detected?
    90 000000C5 7506                    	jnz .exit
    91 000000C7 4883C310                	add rbx, 16						; prepare for next block
    92 000000CB EBBD                    	jmp .loop
    93                                  .exit:
    94 000000CD 48BF-                   	mov rdi, NL
    94 000000CF [3400000000000000] 
    95 000000D7 E8(00000000)            	call printf
    96                                  
    97 000000DC 4C89E0                  	mov rax, r12					; return the number of occurences
    98 000000DF C9                      	leave
    99 000000E0 C3                      	ret
   100                                  
   101                                  ; --------------------------------------------------------------
   102                                  pstrlen:
   103 000000E1 55                      	push rbp
   104 000000E2 4889E5                  	mov rbp, rsp
   105 000000E5 4883EC10                	sub rsp, 16						; for pushing xmm0
   106 000000E9 F30F7F45F0              	movdqu [rbp - 16], xmm0			; push xmm0
   107 000000EE 48C7C0F0FFFFFF          	mov rax, -16					; avoid ZF flag setting later
   108 000000F5 660FEFC0                	pxor xmm0, xmm0					; search for 0 (end of string)
   109                                  .loop:
   110                                  	; avoid setting ZF when rax = 0 after pcmpistri
   111 000000F9 4883C010                	add rax, 16
   112 000000FD 660F3A63040708          	pcmpistri xmm0, [rdi + rax], 0x08	; equal each
   113 00000104 75F3                    	jnz .loop						; 0 found?
   114 00000106 4801C8                  	add rax, rcx					; rax = bytes already handled
   115                                  
   116                                  	; rcx = bytes handled in terminating loop
   117 00000109 F30F6F45F0              	movdqu xmm0, [rbp - 16]			; pop xmm0
   118                                  
   119 0000010E C9                      	leave
   120 0000010F C3                      	ret
   121                                  
   122                                  ; --------------------------------------------------------------
   123                                  ; function for printing the mask
   124                                  ; xmm0 contains the mask
   125                                  ; rsi constains the number of bits to print (16 or less)
   126                                  print_mask:
   127 00000110 55                      	push rbp
   128 00000111 4889E5                  	mov rbp, rsp
   129 00000114 4883EC10                	sub rsp, 16						; for saving xmm0
   130 00000118 E81F000000              	call reverse_xmm0				; little endian
   131 0000011D 66440FD7E8              	pmovmskb r13d, xmm0				; mov byte mask to r13d
   132 00000122 F30F7F45F0              	movdqu [rbp - 16], xmm0			; push xmm1 because of printf
   133 00000127 57                      	push rdi						; rdi contains string1
   134 00000128 4489EF                  	mov edi, r13d					; contains mask to be printed
   135                                  
   136 0000012B 52                      	push rdx						; contains the mask
   137 0000012C 51                      	push rcx						; contains end of string flag
   138 0000012D E8(00000000)            	call print16b
   139 00000132 59                      	pop rcx
   140 00000133 5A                      	pop rdx
   141 00000134 5F                      	pop rdi
   142                                  
   143 00000135 F30F6F4DF0              	movdqu xmm1, [rbp - 16]			; pop xmm1
   144 0000013A C9                      	leave
   145 0000013B C3                      	ret
   146                                  
   147                                  ; ----------------------------------------------------------------
   148                                  ; function for reversing, shuffling xmm0
   149                                  reverse_xmm0:
   150                                  
   151                                  section .data
   152                                  	; mask for reversing
   153 00000076 0F0E0D0C0B0A090807-     	.bytereverse db 15, 14,13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0
   153 0000007F 06050403020100     
   154                                  
   155                                  section .text
   156 0000013C 55                      	push rbp
   157 0000013D 4889E5                  	mov rbp, rsp
   158 00000140 4883EC10                	sub rsp, 16
   159                                  
   160 00000144 F30F7F55F0              	movdqu [rbp - 16], xmm2
   161 00000149 F30F6F1425-             	movdqu xmm2, [.bytereverse]					; load the mask in xmm2
   161 0000014E [76000000]         
   162 00000152 660F3800C2              	pshufb xmm0, xmm2							; do the shuffle
   163 00000157 F30F6F55F0              	movdqu xmm2, [rbp-16]						; pop xmm2
   164                                  
   165 0000015C C9                      	leave
   166 0000015D C3                      	ret
   167                                  
