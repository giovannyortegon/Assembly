     1                                  ; icalc.asm
     2                                  extern printf
     3                                  section .data
     4                                  ;	number1 dq 128	; the number to be used to
     5 00000000 874B6B5D54DC2B00        	number1 dq 12345678901234567	; the number to be used to
     6                                  ;	number2 dq 19	; show the arithmetic
     7 00000008 6400000000000000        	number2 dq 100	; show the arithmetic
     8 00000010 F4FFFFFFFFFFFFFF        	neg_num dq -12	; to show sign extension
     9 00000018 546865206E756D6265-     	fmt		db "The numbers are %ld and %ld", 10, 0
     9 00000021 72732061726520256C-
     9 0000002A 6420616E6420256C64-
     9 00000033 0A00               
    10 00000035 257320256C640A00        	fmt_int db "%s %ld", 10, 0
    11 0000003D 5468652073756D2069-     	sumi	db "The sum is", 0
    11 00000046 7300               
    12 00000048 546865206469666665-     	difi	db "The difference is", 0
    12 00000051 72656E636520697300 
    13 0000005A 4E756D626572203120-     	inci	db "Number 1 incremented:", 0
    13 00000063 696E6372656D656E74-
    13 0000006C 65643A00           
    14 00000070 4E756D626572203120-     	deci	db "Number 1 decremented:", 0
    14 00000079 64656372656D656E74-
    14 00000082 65643A00           
    15 00000086 4E756D626572203120-     	sali	db "Number 1 Shift left 2 (x4):", 0
    15 0000008F 5368696674206C6566-
    15 00000098 74203220287834293A-
    15 000000A1 00                 
    16 000000A2 4E756D626572203120-     	sari	db "Number 1 Shift right 2 (/4):", 0
    16 000000AB 536869667420726967-
    16 000000B4 6874203220282F3429-
    16 000000BD 3A00               
    17 000000BF 4E756D626572203120-     	sariex	db "Number 1 Shift right 2 (/4) with "
    17 000000C8 536869667420726967-
    17 000000D1 6874203220282F3429-
    17 000000DA 207769746820       
    18 000000E0 7369676E2065787465-     			db "sign extension:", 0
    18 000000E9 6E73696F6E3A00     
    19 000000F0 5468652070726F6475-     	multi	db "The product is", 0
    19 000000F9 637420697300       
    20 000000FF 54686520696E746567-     	divi	db "The integer quotient is", 0
    20 00000108 65722071756F746965-
    20 00000111 6E7420697300       
    21 00000117 546865206D6F64756C-     	remi	db "The modulo is", 0
    21 00000120 6F20697300         
    22                                  section .bss
    23 00000000 ????????????????        	resulti	resq 1
    24 00000008 ????????????????        	modulo	resq 1
    25                                  section .text
    26                                  	global main
    27                                  main:
    28 00000000 55                      	push rbp
    29 00000001 4889E5                  	mov rbp, rsp
    30                                  ; displaying the numbers
    31 00000004 48BF-                   	mov rdi, fmt
    31 00000006 [1800000000000000] 
    32 0000000E 488B3425[00000000]      	mov rsi, [number1]
    33 00000016 488B1425[08000000]      	mov rdx, [number2]
    34 0000001E 4831C0                  	xor rax, rax
    35 00000021 E8(00000000)            	call printf
    36                                  ; adding
    37 00000026 488B0425[00000000]      	mov rax, [number1]
    38 0000002E 48030425[08000000]      	add rax, [number2]		; add number2 to rax
    39 00000036 48890425[00000000]      	mov [resulti], rax		; move sum to result
    40                                  ; display the result
    41 0000003E 48BF-                   	mov rdi, fmt_int
    41 00000040 [3500000000000000] 
    42 00000048 48BE-                   	mov rsi, sumi
    42 0000004A [3D00000000000000] 
    43 00000052 488B1425[00000000]      	mov rdx, [resulti]
    44 0000005A B800000000              	mov rax, 0
    45 0000005F E8(00000000)            	call printf
    46                                  ; substracting
    47 00000064 488B0425[00000000]      	mov rax, [number1]
    48 0000006C 482B0425[08000000]      	sub rax, [number2]		; subtract number2 from rax
    49 00000074 48890425[00000000]      	mov [resulti], rax
    50                                  ; displaying the result
    51 0000007C 48BF-                   	mov rdi, fmt_int
    51 0000007E [3500000000000000] 
    52 00000086 48BE-                   	mov rsi, difi
    52 00000088 [4800000000000000] 
    53 00000090 488B1425[00000000]      	mov rdx, [resulti]
    54 00000098 B800000000              	mov rax, 0
    55 0000009D E8(00000000)            	call printf
    56                                  ; incrementing
    57 000000A2 488B0425[00000000]      	mov rax, [number1]
    58 000000AA 48FFC0                  	inc rax					; increment rax with 1
    59 000000AD 48890425[00000000]      	mov [resulti], rax
    60                                  ; displaying the result
    61 000000B5 48BF-                   	mov rdi, fmt_int
    61 000000B7 [3500000000000000] 
    62 000000BF 48BE-                   	mov rsi, inci
    62 000000C1 [5A00000000000000] 
    63 000000C9 488B1425[00000000]      	mov rdx, [resulti]
    64 000000D1 B800000000              	mov rax, 0
    65 000000D6 E8(00000000)            	call printf
    66                                  ; decrementing
    67 000000DB 488B0425[00000000]      	mov rax, [number1]
    68 000000E3 48FFC8                  	dec rax					; decrement rax with 1
    69 000000E6 48890425[00000000]      	mov [resulti], rax
    70                                  ;displaying the result
    71 000000EE 48BF-                   	mov rdi, fmt_int
    71 000000F0 [3500000000000000] 
    72 000000F8 48BE-                   	mov rsi, deci
    72 000000FA [7000000000000000] 
    73 00000102 488B1425[00000000]      	mov rdx, [resulti]
    74 0000010A 4831C0                  	xor rax, rax
    75 0000010D E8(00000000)            	call printf
    76                                  ; shift arithmetic left
    77 00000112 488B0425[00000000]      	mov rax, [number1]
    78 0000011A 48C1E002                	sal rax, 2				; multiply rax by 4
    79 0000011E 48890425[00000000]      	mov [resulti], rax
    80                                  ; displaying the result
    81 00000126 48BF-                   	mov rdi, fmt_int
    81 00000128 [3500000000000000] 
    82 00000130 48BE-                   	mov rsi, sali
    82 00000132 [8600000000000000] 
    83 0000013A 488B1425[00000000]      	mov rdx, [resulti]
    84 00000142 4831C0                  	xor rax, rax
    85 00000145 E8(00000000)            	call printf
    86                                  ; shift arithmetic right
    87 0000014A 488B0425[00000000]      	mov rax, [number1]
    88 00000152 48C1F802                	sar rax, 2				; divide rax by 4
    89 00000156 48890425[00000000]      	mov [resulti], rax
    90                                  ; displaying the result
    91 0000015E 48BF-                   	mov rdi, fmt_int
    91 00000160 [3500000000000000] 
    92 00000168 48BE-                   	mov rsi, sari
    92 0000016A [A200000000000000] 
    93 00000172 488B1425[00000000]      	mov rdx, [resulti]
    94 0000017A B800000000              	mov rax, 0
    95 0000017F E8(00000000)            	call printf
    96                                  ; shift arithmetic right with sign extension
    97 00000184 488B0425[10000000]      	mov rax, [neg_num]
    98 0000018C 48C1F802                	sar rax, 2				; divide rax by 4
    99 00000190 48890425[00000000]      	mov [resulti], rax
   100                                  ; displaying the result
   101 00000198 48BF-                   	mov rdi, fmt_int
   101 0000019A [3500000000000000] 
   102 000001A2 48BE-                   	mov rsi, sariex
   102 000001A4 [BF00000000000000] 
   103 000001AC 488B1425[00000000]      	mov rdx, [resulti]
   104 000001B4 4831C0                  	xor rax, rax
   105 000001B7 E8(00000000)            	call printf
   106                                  ; multiply
   107 000001BC 488B0425[00000000]      	mov rax, [number1]
   108 000001C4 48F72C25[08000000]      	imul qword [number2]	; multiply  rax with number2
   109 000001CC 48890425[00000000]      	mov [resulti], rax
   110                                  ; displaying the result
   111 000001D4 48BF-                   	mov rdi, fmt_int
   111 000001D6 [3500000000000000] 
   112 000001DE 48BE-                   	mov rsi, multi
   112 000001E0 [F000000000000000] 
   113 000001E8 488B1425[00000000]      	mov rdx, [resulti]
   114 000001F0 4831C0                  	xor rax, rax
   115 000001F3 E8(00000000)            	call printf
   116                                  ; divide
   117 000001F8 488B0425[00000000]      	mov rax, [number1]
   118 00000200 4831D2                  	xor rdx, rdx			; rdx needs to be 0 before idiv
   119 00000203 48F73C25[08000000]      	idiv qword	[number2]	; divide rax, by number2, modulo in rdx
   120 0000020B 48890425[00000000]      	mov [resulti], rax
   121 00000213 48891425[08000000]      	mov [modulo], rdx		; rdx to modulo
   122                                  ; displaying the result
   123 0000021B 48BF-                   	mov rdi, fmt_int
   123 0000021D [3500000000000000] 
   124 00000225 48BE-                   	mov rsi, divi
   124 00000227 [FF00000000000000] 
   125 0000022F 488B1425[00000000]      	mov rdx, [resulti]
   126 00000237 4831C0                  	xor rax, rax
   127 0000023A E8(00000000)            	call printf
   128                                  
   129 0000023F 48BF-                   	mov rdi, fmt_int
   129 00000241 [3500000000000000] 
   130 00000249 48BE-                   	mov rsi, remi
   130 0000024B [1701000000000000] 
   131 00000253 488B1425[08000000]      	mov rdx, [modulo]
   132 0000025B 4831C0                  	xor rax, rax
   133 0000025E E8(00000000)            	call printf
   134                                  
   135 00000263 4889EC                  	mov rsp, rbp
   136 00000266 5D                      	pop rbp
   137 00000267 C3                      	ret
